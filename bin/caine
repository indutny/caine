#!/usr/bin/env node
var yargs = require('yargs')
    .usage('Usage: $0 --config config.json')
    .alias('c', 'config')
    .alias('t', 'token-for')
    .alias('p', 'password')
    .example('$0 --token-for username --password ...',
             'request github API token')
    .example('$0 --config config.json', 'start caine')
    .describe('token-for', 'Just request a token')
    .describe('config', 'Path to configuration file');

var argv = yargs.argv;

var caine = require('../');
var assert = require('assert');
var util = require('util');

if (argv['token-for']) {
  if (!argv['password'])
    return yargs.showHelp();

  return caine.getToken(argv['token-for'], argv['password'], function(err,
                                                                      token) {
    if (err)
      throw err;

    console.log('Token is: ' + token);
  });
}

if (!argv.config)
  return yargs.showHelp();

var fs = require('fs');
var config = JSON.parse(fs.readFileSync(argv.config).toString());
assert.equal(typeof config.pollInterval, 'number',
             'config.pollInterval is missing or invalid');

var caine = caine.create(config);

caine.init(function(err) {
  if (err)
    throw err;

  function poll() {
    caine.poll(function(err) {
      if (err)
        throw err;

      setTimeout(poll, config.pollInterval * 1000);

      updateTimestamp();
    });
  }
  poll();
});

caine.on('ratelimit', function(meta) {
  console.log('Github rate limit: %d of %d (until %s)',
              meta['x-ratelimit-remaining'] | 0,
              meta['x-ratelimit-limit'] | 0,
              new Date(meta['x-ratelimit-reset'] * 1000));
});

function updateTimestamp() {
  var body = JSON.stringify(util._extend(config, {
    timestamp: caine.timestamp.getTime()
  }), null, 2);

  fs.writeFile(argv.config, body, function(err) {
    if (err)
      throw err;
  });
}
